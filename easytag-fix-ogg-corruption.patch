From fab1995b378bf7052037b86b4995c413c50f447e Mon Sep 17 00:00:00 2001
From: Phil Clayton <phil.clayton@veonix.com>
Date: Wed, 15 Apr 2020 21:25:44 +0100
Subject: [PATCH 1/3] Revert "Do not maintain an open handle on Ogg files"

This reverts commit e5c640ca3f259f1b74e716723345521987a7bd68 because it
corrupts Ogg files.

In a corrupted Ogg Vorbis file we see:

  Page 0: identification header packet, as expected
  Page 1: comment and setup header packets, as expected, with comments
           updated
  Page 2: audio packets, looks plausible
  Page 3: identification, comment and setup header packets again, with
           original comments
  Page 4: audio packets, the same as page 2
  ...

The corruption starts at page 3 where headers are repeated.

It is fairly clear why e5c640ca causes this behaviour.  With this
commit, the `GFileInputStream` from `vcedit_open()` is no longer passed
to `vcedit_write()` via `state->in` and `vcedit_write()` starts reading
from the beginning of a fresh `GFileInputStream`, instead of continuing
to read the `GFileInputStream` that was used to read the headers in
`vcedit_open()`.  Consequently the old headers are written out after the
new headers have been written out.  Note that page 2 has some audio
packets because these are already buffered in `state->oy` by
`vcedit_open()` and will be read out in `_fetch_next_packet` from
`vcedit_write()` before `_fetch_next_packet` starts adding pages from
the fresh `GFileInputStream`.

e5c640ca removes the field `in` from the reader state
`struct _EtOggState` but leaves the field `oy`.  The input stream `in`
surely belongs in the reader state because it feeds `ogg_sync_state oy`:
their states progress together.
---
 src/tags/vcedit.c | 92 ++++++++++++++++++++++++++++-------------------
 1 file changed, 56 insertions(+), 36 deletions(-)

diff --git a/src/tags/vcedit.c b/src/tags/vcedit.c
index c662e844..e68e86ca 100644
--- a/src/tags/vcedit.c
+++ b/src/tags/vcedit.c
@@ -35,6 +35,7 @@
 struct _EtOggState
 {
     /*< private >*/
+    GFileInputStream *in;
 #ifdef ENABLE_SPEEX
     SpeexHeader *si;
 #endif
@@ -125,6 +126,11 @@ vcedit_clear_internals (EtOggState *state)
     }
 #endif /* ENABLE_OPUS */
 
+    if (state->in)
+    {
+        g_object_unref (state->in);
+    }
+
     memset (state, 0, sizeof (*state));
 }
 
@@ -239,7 +245,6 @@ _blocksize (EtOggState *s,
 
 static gboolean
 _fetch_next_packet (EtOggState *s,
-                    GInputStream *istream,
                     ogg_packet *p,
                     ogg_page *page,
                     GError **error)
@@ -269,8 +274,8 @@ _fetch_next_packet (EtOggState *s,
         while (ogg_sync_pageout (s->oy, page) <= 0)
         {
             buffer = ogg_sync_buffer (s->oy, CHUNKSIZE);
-            bytes = g_input_stream_read (istream, buffer, CHUNKSIZE, NULL,
-                                         error);
+            bytes = g_input_stream_read (G_INPUT_STREAM (s->in), buffer,
+                                         CHUNKSIZE, NULL, error);
             ogg_sync_wrote (s->oy, bytes);
 
             if(bytes == 0)
@@ -303,7 +308,7 @@ _fetch_next_packet (EtOggState *s,
 
         g_assert (error == NULL || *error == NULL);
         ogg_stream_pagein (s->os, page);
-        return _fetch_next_packet (s, istream, p, page, error);
+        return _fetch_next_packet (s, p, page, error);
     }
 }
 
@@ -490,13 +495,14 @@ vcedit_open (EtOggState *state,
         return FALSE;
     }
 
+    state->in = istream;
     state->oy = g_slice_new (ogg_sync_state);
     ogg_sync_init (state->oy);
 
     while(1)
     {
         buffer = ogg_sync_buffer (state->oy, CHUNKSIZE);
-        bytes = g_input_stream_read (G_INPUT_STREAM (istream), buffer,
+        bytes = g_input_stream_read (G_INPUT_STREAM (state->in), buffer,
                                      CHUNKSIZE, NULL, error);
         if (bytes == -1)
         {
@@ -742,7 +748,7 @@ vcedit_open (EtOggState *state,
         }
 
         buffer = ogg_sync_buffer (state->oy, CHUNKSIZE);
-        bytes = g_input_stream_read (G_INPUT_STREAM (istream), buffer,
+        bytes = g_input_stream_read (G_INPUT_STREAM (state->in), buffer,
                                      CHUNKSIZE, NULL, error);
 
         if (bytes == -1)
@@ -764,14 +770,11 @@ vcedit_open (EtOggState *state,
 
     /* Headers are done! */
     g_assert (error == NULL || *error == NULL);
-    /* TODO: Handle error during stream close. */
-    g_object_unref (istream);
 
     return TRUE;
 
 err:
     g_assert (error == NULL || *error != NULL);
-    g_object_unref (istream);
     vcedit_clear_internals (state);
     return FALSE;
 }
@@ -794,7 +797,6 @@ vcedit_write (EtOggState *state,
     glong bytes;
     gboolean needflush = FALSE;
     gboolean needout = FALSE;
-    GFileInputStream *istream;
     GOutputStream *ostream;
     gchar *buf;
     gsize size;
@@ -802,22 +804,11 @@ vcedit_write (EtOggState *state,
 
     g_return_val_if_fail (error == NULL || *error == NULL, FALSE);
 
-    istream = g_file_read (file, NULL, error);
-
-    if (!istream)
-    {
-        g_assert (error == NULL || *error != NULL);
-        return FALSE;
-    }
-
-    fileinfo = g_file_input_stream_query_info (istream,
-                                               G_FILE_ATTRIBUTE_STANDARD_SIZE,
-                                               NULL, error);
-
+    fileinfo = g_file_query_info (file, G_FILE_ATTRIBUTE_STANDARD_SIZE,
+                                  G_FILE_QUERY_INFO_NONE, NULL, error);
     if (!fileinfo)
     {
         g_assert (error == NULL || *error != NULL);
-        g_object_unref (istream);
         return FALSE;
     }
 
@@ -878,8 +869,7 @@ vcedit_write (EtOggState *state,
         }
     }
 
-    while (_fetch_next_packet (state, G_INPUT_STREAM (istream), &op, &ogin,
-                               error))
+    while (_fetch_next_packet (state, &op, &ogin, error))
     {
         if (needflush)
         {
@@ -1055,7 +1045,7 @@ vcedit_write (EtOggState *state,
     {
         /* We copy the rest of the stream (other logical streams)
          * through, a page at a time. */
-        while (1)
+        while(1)
         {
             result = ogg_sync_pageout (state->oy, &ogout);
 
@@ -1094,7 +1084,7 @@ vcedit_write (EtOggState *state,
 
         buffer = ogg_sync_buffer (state->oy, CHUNKSIZE);
 
-        bytes = g_input_stream_read (G_INPUT_STREAM (istream), buffer,
+        bytes = g_input_stream_read (G_INPUT_STREAM (state->in), buffer,
                                      CHUNKSIZE, NULL, error);
 
         if (bytes == -1)
@@ -1112,19 +1102,11 @@ vcedit_write (EtOggState *state,
         }
     }
 
+
 cleanup:
     ogg_stream_clear (&streamout);
     ogg_packet_clear (&header_comments);
 
-    if (!g_input_stream_close (G_INPUT_STREAM (istream), NULL, error))
-    {
-        /* Ignore the _close() failure, and try the write anyway. */
-        g_warning ("Error closing Ogg file for reading: %s",
-                   (*error)->message);
-        g_clear_error (error);
-    }
-
-    g_object_unref (istream);
     g_free (state->mainbuf);
     g_free (state->bookbuf);
     state->mainbuf = state->bookbuf = NULL;
@@ -1158,13 +1140,41 @@ cleanup:
     buf = g_memory_output_stream_steal_data (G_MEMORY_OUTPUT_STREAM (ostream));
     size = g_memory_output_stream_get_data_size (G_MEMORY_OUTPUT_STREAM (ostream));
 
+    /* At least on Windows, writing to a file with an open-for-reading stream
+     * fails, so close the input stream before writing to the file. */
+    if (!g_input_stream_close (G_INPUT_STREAM (state->in), NULL, error))
+    {
+        /* Ignore the _close() failure, and try the write anyway. */
+        g_warning ("Error closing Ogg file for reading: %s",
+                   (*error)->message);
+        g_clear_error (error);
+    }
+
+    g_object_unref (state->in);
+    state->in = NULL;
+
     /* Write the in-memory data back out to the original file. */
     if (!g_file_replace_contents (file, buf, size, NULL, FALSE,
                                   G_FILE_CREATE_NONE, NULL, NULL, error))
     {
+        GError *tmp_error = NULL;
+
         g_object_unref (ostream);
         g_free (buf);
 
+        /* Re-open the file for reading, to keep the internal state
+         * consistent. */
+        state->in = g_file_read (file, NULL, &tmp_error);
+
+        if (!state->in)
+        {
+            g_warning ("Error opening Ogg file for reading after write failure: %s",
+                       tmp_error->message);
+            g_clear_error (&tmp_error);
+            g_assert (error == NULL || *error != NULL);
+            return FALSE;
+        }
+
         g_assert (error == NULL || *error != NULL);
         return FALSE;
     }
@@ -1172,6 +1182,16 @@ cleanup:
     g_free (buf);
     g_object_unref (ostream);
 
+    /* Re-open the file, now that the write has completed. */
+    state->in = g_file_read (file, NULL, error);
+
+    if (!state->in)
+    {
+        g_assert (error == NULL || *error != NULL);
+        return FALSE;
+    }
+
+
     return TRUE;
 }
 
-- 
GitLab


From a830ecf50855bda703b1debd2df9207e65010174 Mon Sep 17 00:00:00 2001
From: Phil Clayton <phil.clayton@veonix.com>
Date: Sun, 19 Apr 2020 16:42:00 +0100
Subject: [PATCH 2/3] Restrict use of Vorbis comment functions and simplify

vcedit_write needs most of the functionality of vcedit_open to skip over
the header packets so their use is restricted as follows:

 1. The reader state passed to vcedit_write must be from vcedit_open
    with the input stream at the right position (with Vorbis comments
    updated as required).

 2. Once vcedit_write has used the reader state, it cannot be reused by
    another call to vcedit_write.

Given 2, vcedit_write clears the reader state, which allows it to be
reused with vcedit_open.  The restrictions on usage are documented.

vcedit_write is also updated to properly support NULL for the error
argument (although not currently called with such an error value).
---
 src/tags/vcedit.c | 182 ++++++++++++++++++++++++----------------------
 1 file changed, 97 insertions(+), 85 deletions(-)

diff --git a/src/tags/vcedit.c b/src/tags/vcedit.c
index e68e86ca..9a0ee089 100644
--- a/src/tags/vcedit.c
+++ b/src/tags/vcedit.c
@@ -467,6 +467,17 @@ err:
     return result;
 }
 
+/* vcedit_open:
+ * @state: (out caller-allocates): the reader state after the header packets
+ *   have been read
+ * @file: (in): the Ogg file to read
+ * @error: (out) (allow-none): return location for a #GError, or %NULL
+ *
+ * Opens @file, reads the header (non-audio) packets and populates the
+ * header data in @state.
+ *
+ * Returns: %TRUE on success, or %FALSE on error with @error filled in
+ */
 gboolean
 vcedit_open (EtOggState *state,
              GFile *file,
@@ -779,6 +790,25 @@ err:
     return FALSE;
 }
 
+/* vcedit_write:
+ * @state: (in): the reader state from vcedit_open() with the header comments
+ *   modified as required
+ * @file: (in): the file to write, which may exist and may be the same as the
+ *   file being read with @state
+ * @error: (out) (allow-none): return location for a #GError, or %NULL
+ *
+ * Replaces contents of @file with an Ogg bitstream where the header packets
+ * are taken from data in @state and the subsequent (audio) packets are read
+ * read using the reader state @state.
+ *
+ * It is assumed that reading using the reader state @state gives the packets
+ * following the header packets.  Therefore, the reader state must be created
+ * using vcedit_open().  After writing, @state cannot be used to write again
+ * so it is cleared, which allows it to be used with a subsequent call to
+ * vcedit_open().
+ *
+ * Returns: %TRUE on success, or %FALSE on error with @error filled in
+ */
 gboolean
 vcedit_write (EtOggState *state,
               GFile *file,
@@ -792,30 +822,33 @@ vcedit_write (EtOggState *state,
     ogg_page ogout, ogin;
     ogg_packet op;
     ogg_int64_t granpos = 0;
-    gint result;
     gchar *buffer;
     glong bytes;
+    GError *read_error = NULL;
     gboolean needflush = FALSE;
     gboolean needout = FALSE;
     GOutputStream *ostream;
     gchar *buf;
     gsize size;
     GFileInfo *fileinfo;
+    gboolean result;
 
     g_return_val_if_fail (error == NULL || *error == NULL, FALSE);
 
-    fileinfo = g_file_query_info (file, G_FILE_ATTRIBUTE_STANDARD_SIZE,
-                                  G_FILE_QUERY_INFO_NONE, NULL, error);
+    fileinfo = g_file_input_stream_query_info (state->in,
+                                               G_FILE_ATTRIBUTE_STANDARD_SIZE,
+                                               NULL, error);
     if (!fileinfo)
     {
+        vcedit_clear_internals (state);
+
         g_assert (error == NULL || *error != NULL);
         return FALSE;
     }
 
-    buf = g_malloc (g_file_info_get_size (fileinfo));
-    ostream = g_memory_output_stream_new (buf,
-                                          g_file_info_get_size (fileinfo),
-                                          g_realloc, g_free);
+    size = (gsize)(g_file_info_get_size (fileinfo));
+    buf = g_malloc (size);
+    ostream = g_memory_output_stream_new (buf, size, g_realloc, g_free);
     g_object_unref (fileinfo);
 
     state->eosin = FALSE;
@@ -845,7 +878,7 @@ vcedit_write (EtOggState *state,
         ogg_stream_packetin (&streamout, &header_codebooks);
     }
 
-    while ((result = ogg_stream_flush (&streamout, &ogout)))
+    while (ogg_stream_flush (&streamout, &ogout))
     {
         gsize bytes_written;
 
@@ -856,7 +889,7 @@ vcedit_write (EtOggState *state,
             g_debug ("Only %" G_GSIZE_FORMAT " bytes out of %ld bytes of data "
                      "were written", bytes_written, ogout.header_len);
             g_assert (error == NULL || *error != NULL);
-            goto cleanup;
+            goto err;
         }
 
         if (!g_output_stream_write_all (ostream, ogout.body, ogout.body_len,
@@ -865,11 +898,12 @@ vcedit_write (EtOggState *state,
             g_debug ("Only %" G_GSIZE_FORMAT " bytes out of %ld bytes of data "
                      "were written", bytes_written, ogout.body_len);
             g_assert (error == NULL || *error != NULL);
-            goto cleanup;
+            goto err;
         }
     }
 
-    while (_fetch_next_packet (state, &op, &ogin, error))
+    /* Always supply an error to determine why the loop terminates. */
+    while (_fetch_next_packet (state, &op, &ogin, &read_error))
     {
         if (needflush)
         {
@@ -884,7 +918,7 @@ vcedit_write (EtOggState *state,
                     g_debug ("Only %" G_GSIZE_FORMAT " bytes out of %ld bytes of "
                              "data were written", bytes_written, ogout.header_len);
                     g_assert (error == NULL || *error != NULL);
-                    goto cleanup;
+                    goto err;
                 }
 
                 if (!g_output_stream_write_all (ostream, ogout.body,
@@ -894,7 +928,7 @@ vcedit_write (EtOggState *state,
                     g_debug ("Only %" G_GSIZE_FORMAT " bytes out of %ld bytes of "
                              "data were written", bytes_written, ogout.body_len);
                     g_assert (error == NULL || *error != NULL);
-                    goto cleanup;
+                    goto err;
                 }
             }
         }
@@ -912,7 +946,7 @@ vcedit_write (EtOggState *state,
                              "of data were written", bytes_written,
                              ogout.header_len);
                     g_assert (error == NULL || *error != NULL);
-                    goto cleanup;
+                    goto err;
                 }
 
                 if (!g_output_stream_write_all (ostream, ogout.body,
@@ -923,7 +957,7 @@ vcedit_write (EtOggState *state,
                              "of data were written", bytes_written,
                              ogout.body_len);
                     g_assert (error == NULL || *error != NULL);
-                    goto cleanup;
+                    goto err;
                 }
             }
         }
@@ -974,18 +1008,26 @@ vcedit_write (EtOggState *state,
         }
     }
 
-    if (error != NULL)
+    if (read_error != NULL)
     {
-        if (g_error_matches (*error, ET_OGG_ERROR, ET_OGG_ERROR_EOF)
-            || g_error_matches (*error, ET_OGG_ERROR, ET_OGG_ERROR_EOS))
+        if (g_error_matches (read_error, ET_OGG_ERROR, ET_OGG_ERROR_EOF)
+            || g_error_matches (read_error, ET_OGG_ERROR, ET_OGG_ERROR_EOS))
         {
             /* While nominally errors, these are expected and can be safely
              * ignored. */
-            g_clear_error (error);
+            g_clear_error (&read_error);
         }
         else
         {
-            goto cleanup;
+            if (error != NULL)
+            {
+                *error = read_error;
+            }
+            else
+            {
+                g_clear_error (&read_error);
+            }
+            goto err;
         }
     }
 
@@ -1002,7 +1044,7 @@ vcedit_write (EtOggState *state,
             g_debug ("Only %" G_GSIZE_FORMAT " bytes out of %ld bytes of data "
                      "were written", bytes_written, ogout.header_len);
             g_assert (error == NULL || *error != NULL);
-            goto cleanup;
+            goto err;
         }
 
         if (!g_output_stream_write_all (ostream, ogout.body, ogout.body_len,
@@ -1011,7 +1053,7 @@ vcedit_write (EtOggState *state,
             g_debug ("Only %" G_GSIZE_FORMAT " bytes out of %ld bytes of data "
                      "were written", bytes_written, ogout.body_len);
             g_assert (error == NULL || *error != NULL);
-            goto cleanup;
+            goto err;
         }
     }
 
@@ -1026,7 +1068,7 @@ vcedit_write (EtOggState *state,
             g_debug ("Only %" G_GSIZE_FORMAT " bytes out of %ld bytes of data "
                      "were written", bytes_written, ogout.header_len);
             g_assert (error == NULL || *error != NULL);
-            goto cleanup;
+            goto err;
         }
 
         if (!g_output_stream_write_all (ostream, ogout.body, ogout.body_len,
@@ -1035,10 +1077,22 @@ vcedit_write (EtOggState *state,
             g_debug ("Only %" G_GSIZE_FORMAT " bytes out of %ld bytes of data "
                      "were written", bytes_written, ogout.body_len);
             g_assert (error == NULL || *error != NULL);
-            goto cleanup;
+            goto err;
+        }
+    }
+
+    if (!state->eosin)
+    {
+        if (error != NULL && *error == NULL)
+        {
+            g_set_error (error, ET_OGG_ERROR, ET_OGG_ERROR_OUTPUT,
+                         "Stream ended unexpectedly while writing out");
         }
+        goto err;
     }
 
+    g_assert (error == NULL || *error == NULL);
+
     state->eosin = FALSE; /* clear it, because not all paths to here do */
 
     while (!state->eosin) /* We reached eos, not eof */
@@ -1047,7 +1101,7 @@ vcedit_write (EtOggState *state,
          * through, a page at a time. */
         while(1)
         {
-            result = ogg_sync_pageout (state->oy, &ogout);
+            int result = ogg_sync_pageout (state->oy, &ogout);
 
             if (result == 0)
             {
@@ -1069,7 +1123,7 @@ vcedit_write (EtOggState *state,
                                                 &bytes_written, NULL, error))
                 {
                     g_assert (error == NULL || *error != NULL);
-                    goto cleanup;
+                    goto err;
                 }
 
                 if (!g_output_stream_write_all (ostream, ogout.body,
@@ -1077,7 +1131,7 @@ vcedit_write (EtOggState *state,
                                                 NULL, error))
                 {
                     g_assert (error == NULL || *error != NULL);
-                    goto cleanup;
+                    goto err;
                 }
             }
         }
@@ -1090,7 +1144,7 @@ vcedit_write (EtOggState *state,
         if (bytes == -1)
         {
             g_assert (error == NULL || *error != NULL);
-            goto cleanup;
+            goto err;
         }
 
         ogg_sync_wrote (state->oy, bytes);
@@ -1102,37 +1156,12 @@ vcedit_write (EtOggState *state,
         }
     }
 
-
-cleanup:
-    ogg_stream_clear (&streamout);
-    ogg_packet_clear (&header_comments);
-
-    g_free (state->mainbuf);
-    g_free (state->bookbuf);
-    state->mainbuf = state->bookbuf = NULL;
-
-    if (!state->eosin)
-    {
-        if (!error)
-        {
-            g_set_error (error, ET_OGG_ERROR, ET_OGG_ERROR_OUTPUT,
-                         "Error writing stream to output. Output stream may be corrupted or truncated");
-        }
-    }
-
-    if (error == NULL || *error != NULL)
-    {
-        g_object_unref (ostream);
-        return FALSE;
-    }
-
     g_assert (error == NULL || *error == NULL);
 
     if (!g_output_stream_close (ostream, NULL, error))
     {
-        g_object_unref (ostream);
         g_assert (error == NULL || *error != NULL);
-        return FALSE;
+        goto err;
     }
 
     g_assert (error == NULL || *error == NULL);
@@ -1150,49 +1179,32 @@ cleanup:
         g_clear_error (error);
     }
 
-    g_object_unref (state->in);
-    state->in = NULL;
-
-    /* Write the in-memory data back out to the original file. */
+    /* Write the in-memory data to file. */
     if (!g_file_replace_contents (file, buf, size, NULL, FALSE,
                                   G_FILE_CREATE_NONE, NULL, NULL, error))
     {
-        GError *tmp_error = NULL;
-
-        g_object_unref (ostream);
         g_free (buf);
-
-        /* Re-open the file for reading, to keep the internal state
-         * consistent. */
-        state->in = g_file_read (file, NULL, &tmp_error);
-
-        if (!state->in)
-        {
-            g_warning ("Error opening Ogg file for reading after write failure: %s",
-                       tmp_error->message);
-            g_clear_error (&tmp_error);
-            g_assert (error == NULL || *error != NULL);
-            return FALSE;
-        }
-
         g_assert (error == NULL || *error != NULL);
-        return FALSE;
+        goto err;
     }
 
+    g_assert (error == NULL || *error == NULL);
+
     g_free (buf);
-    g_object_unref (ostream);
 
-    /* Re-open the file, now that the write has completed. */
-    state->in = g_file_read (file, NULL, error);
+    result = TRUE;
+    goto cleanup;
 
-    if (!state->in)
-    {
-        g_assert (error == NULL || *error != NULL);
-        return FALSE;
-    }
+err:
+    result = FALSE;
 
+cleanup:
+    ogg_stream_clear (&streamout);
+    ogg_packet_clear (&header_comments);
+    g_object_unref (ostream);
+    vcedit_clear_internals (state);
 
-    return TRUE;
+    return result;
 }
 
 #endif /* ENABLE_OGG */
-- 
GitLab


From 95dc56132af0c26cba75a997f72aec2e3fe2b11f Mon Sep 17 00:00:00 2001
From: Phil Clayton <phil.clayton@veonix.com>
Date: Sun, 19 Apr 2020 17:52:15 +0100
Subject: [PATCH 3/3] Remove unused argument from vcedit_supported_stream

The reader state is not required by this function.
---
 src/tags/vcedit.c | 10 ++++------
 1 file changed, 4 insertions(+), 6 deletions(-)

diff --git a/src/tags/vcedit.c b/src/tags/vcedit.c
index 9a0ee089..35d254d7 100644
--- a/src/tags/vcedit.c
+++ b/src/tags/vcedit.c
@@ -380,9 +380,8 @@ err_out:
 }
 
 /* vcedit_supported_stream:
- * @state: current reader state
- * @page: first page of the Ogg stream
- * @error: a #GError to set on failure to find a supported stream
+ * @page: (in): first page of the Ogg stream
+ * @error: (out) (allow-none): return location for a #GError, or %NULL
  *
  * Checks the type of the Ogg stream given by @page to see if it is supported.
  *
@@ -390,8 +389,7 @@ err_out:
  *          from #EtOggKind otherwise
  */
 static EtOggKind
-vcedit_supported_stream (EtOggState *state,
-                         ogg_page *page,
+vcedit_supported_stream (ogg_page *page,
                          GError **error)
 {
     ogg_stream_state stream_state;
@@ -569,7 +567,7 @@ vcedit_open (EtOggState *state,
     state->mainlen = header_main.bytes;
     state->mainbuf = g_memdup (header_main.packet, header_main.bytes);
 
-    state->oggtype = vcedit_supported_stream (state, &og, error);
+    state->oggtype = vcedit_supported_stream (&og, error);
 
     switch (state->oggtype)
     {
-- 
GitLab

